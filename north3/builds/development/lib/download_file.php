<?php

/** Error reporting */
// error_reporting(E_ALL);
// ini_set('display_errors', TRUE);
// ini_set('display_startup_errors', TRUE);
date_default_timezone_set('America/Regina');
define('EOL',(PHP_SAPI == 'cli') ? PHP_EOL : '<br />');

require_once './PHPExcel/PHPExcel.php';
require_once("func_meta.php");

global $schema;

$cache_folder = './cache/';
$cache_xls_folder = $cache_folder . 'xls/';
$var = $_GET["id"];
@$img = $_GET["image"];
$conf = json_decode(file_get_contents($cache_folder . "meta.json"), true);

if(!file_exists($cache_xls_folder)) mkdir($cache_xls_folder, 0777, true);

// return the cached copy for a better performance
$target = "${cache_xls_folder}$var.xlsx";

if(file_exists($target)){
	header("Location: $target");
	setcookie("download_xlsx_$var", "1", time() + (86400 * 3), "/"); // 86400 = 1 day
	return;
}

try{

	$conf_var = findId($conf,$var);
	$name = $conf_var["name"];
	$scale = $conf_var["scale"];
	// $keywords = $conf_var["keywords"];
	// $keywords[] = "immigration";
	// $keywords[] = "SSRL";
	// $keywords = implode(', ', $keywords);
	$table = $conf_var["server"]["table1"];	// the non-spatial table
	@$table_field_top_name = $conf_var["server"]["table1_field_top_name"];
	@$table_field_top_value = $conf_var["server"]["table1_field_top_value"];
	$table_id = $conf_var["server"]["table1_id"];
	$table_field = $conf_var["server"]["table1_field"];
	@$table_field2 = $conf_var["server"]["table1_field2"];
	$fields = $conf_var["server"]["pie_fields"];	// an array of fields: the 1st one is the id field which will also be the foreign key for joinning the spatial layer, the rest are attr fields used to make pie charts
	$fieldNames = $conf_var["server"]["pie_fieldNames"];
	@$fr = $conf_var["server"]["fr"];
	@$en = $conf_var["server"]["en"];
	$lang_filters = $conf_var["server"]["lang_filters"];
	@$percent = $conf_var["server"]["percent"];
	if(array_key_exists("where", $conf_var["server"])){
		$where = $conf_var["server"]["where"];	// for selecting records in table1
		$where = str_replace("\\", "", $where);	// strip off the backslash
	}else{
		$where = null;
	}

	$top_n = 10;
	$view_name = "${table}_top$top_n";

	if($table_field_top_name){
		$table = "${table}_top$top_n";
	}

	// Create new PHPExcel object
	// echo date('H:i:s') , " Create new PHPExcel object" , EOL;
	$objPHPExcel = new PHPExcel();

	// Set document properties
	// echo date('H:i:s') , " Set properties" , EOL;

	$objPHPExcel->getProperties()->setCreator("SSRL")
								 ->setLastModifiedBy("SSRL")
								 ->setTitle("$name ($scale)")
								 ->setCompany("SSRL")
								 ->setSubject("$name ($scale)")
								 ->setDescription("This document is automatically generated by the Immigration Project web server hosted by SSRL. Please direct any questions to <gismatthew@gmail.com>.")
								 // ->setKeywords($keywords)
								 ->setCategory("Immigration Project");

	// Create a first sheet
	// echo date('H:i:s') , " Add data" , EOL;
	$objPHPExcel->setActiveSheetIndex(0);

	if($where){
		$sql = "select * from $schema.$table where $where order by year, $table_id";
	}else
		$sql = "select * from $schema.$table order by year, $table_id";

	$sql_desc = "SELECT * FROM pg_description WHERE  objoid = '$schema.$table'::regclass";

	$rows = $conn->query($sql)->fetchAll(PDO::FETCH_ASSOC);
	$desc = $conn->query($sql_desc)->fetchAll(PDO::FETCH_ASSOC);

	$header = array_keys($rows[0]);

	// Write headers
	// for ($c=0; $c < count($header); $c++) {
		$objPHPExcel->getActiveSheet()->fromArray($header);
		$objPHPExcel->getActiveSheet()->setAutoFilter("A1:" . chr(64+count($header)) . "1");
	// }

	// Write data

	for ($i=0; $i < count($rows); $i++) {
		$objPHPExcel->getActiveSheet()->fromArray($rows[$i],NULL,"A" . ($i+2));
	}

    // $dir = 'lib/' . $img;
    // $objDrawing = new PHPExcel_Worksheet_MemoryDrawing();
    // $objDrawing->setName('My Image');
    // $objDrawing->setDescription('The Image that I am inserting');
    // $objDrawing->setImageResource($dir);
    // $objDrawing->setCoordinates('M3');
    // $objDrawing->setRenderingFunction(PHPExcel_Worksheet_MemoryDrawing::RENDERING_JPEG);
    // $objDrawing->setMimeType(PHPExcel_Worksheet_MemoryDrawing::MIMETYPE_DEFAULT);
    // $objDrawing->setHeight(150);
    // $objDrawing->setWorksheet($objPHPExcel->getActiveSheet());

	// Add comment
	for ($i=0; $i < count($desc); $i++) {
		$cell = chr(64+$desc[$i]['objsubid']) . "1";
		$objPHPExcel->getActiveSheet()->getComment($cell)->setAuthor('SSRL');
		$objCommentRichText = $objPHPExcel->getActiveSheet()->getComment($cell)->getText()->createTextRun('SSRL:');
		$objCommentRichText->getFont()->setBold(true);
		$objPHPExcel->getActiveSheet()->getComment($cell)->getText()->createTextRun("\r\n");
		$objPHPExcel->getActiveSheet()->getComment($cell)->getText()->createTextRun($desc[$i]['description']);
	}

	// $objPHPExcel->getActiveSheet()->setCellValue('A1', "Firstname");
	// $objPHPExcel->getActiveSheet()->setCellValue('B1', "Lastname");
	// $objPHPExcel->getActiveSheet()->setCellValue('C1', "Phone");
	// $objPHPExcel->getActiveSheet()->setCellValue('D1', "Fax");
	// $objPHPExcel->getActiveSheet()->setCellValue('E1', "Is Client ?");

	// Freeze panes
	// echo date('H:i:s') , " Freeze panes" , EOL;
	$objPHPExcel->getActiveSheet()->freezePane('A2');

	// Set password against the spreadsheet file
	// $objPHPExcel->getSecurity()->setLockWindows(true);
	// $objPHPExcel->getSecurity()->setLockStructure(true);
	// $objPHPExcel->getSecurity()->setWorkbookPassword('ssrl2016');

	// $objPHPExcel->getActiveSheet()->getProtection()->setPassword('ssrl2016');
	// $objPHPExcel->getActiveSheet()->getProtection()->setSheet(true); // This should be enabled in order to enable any of the following!
	// $objPHPExcel->getActiveSheet()->getProtection()->setSort(true);
	// $objPHPExcel->getActiveSheet()->getProtection()->setInsertRows(true);
	// $objPHPExcel->getActiveSheet()->getProtection()->setFormatCells(true);

	// Set active sheet index to the first sheet, so Excel opens this as the first sheet
	$objPHPExcel->setActiveSheetIndex(0);

	// Save Excel 2007 file
	// echo date('H:i:s') , " Write to Excel2007 format" , EOL;
	$callStartTime = microtime(true);

	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
	$objWriter->save($target);
	$callEndTime = microtime(true);
	$callTime = $callEndTime - $callStartTime;

	// echo date('H:i:s') , " File written to " , pathinfo($target, PATHINFO_BASENAME) , EOL;
	// echo 'Call time to write Workbook was ' , sprintf('%.4f',$callTime) , " seconds" , EOL;
	// Echo memory usage
	// echo date('H:i:s') , ' Current memory usage: ' , (memory_get_usage(true) / 1024 / 1024) , " MB" , EOL;


	// Echo memory peak usage
	// echo date('H:i:s') , " Peak memory usage: " , (memory_get_peak_usage(true) / 1024 / 1024) , " MB" , EOL;

	// Echo done
	// echo date('H:i:s') , " Done writing file" , EOL;
	// echo 'File has been created in ' , getcwd() , EOL;

	setcookie("download_xlsx_$var", "1", time() + (86400 * 3), "/"); // 86400 = 1 day
	header("Location: $target");

}catch(PDOException $e){
  echo "Error: " . $e->getMessage();
}

?>
